<html>
<head>
<title>Const (Member)</title>
<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
<div id="fb_body_wrapper">
<div id="fb_tab">
<div id="fb_tab_l">Const (Membre)</div>
<div id="fb_tab_r">&nbsp;<img src="images/fblogo_mini.gif" /></div> 
</div> 
<div id="fb_pg_wrapper">
<div id="fb_pg_body">
	Indique qu'un membre d'une proc&eacute;dure est en lecture seule.<br \>
<br \>
<div class="fb_sect_title">Syntaxe</div><div class="fb_sect_cont"><tt><br \>
<a href="KeyPgType.html">Type</a> <i>typename</i><br \>
<div class="fb_indent"><a href="KeyPgDeclare.html">Declare</a> <b>Const</b> <i>membertype</i> <i>membername</i> ...<br \>
</div>End Type<br \>
</tt><br \>
</div><div class="fb_sect_title">Param&egrave;tres</div><div class="fb_sect_cont"><br \>
<tt><i>typename</i></tt><br \>
<div class="fb_indent">Nom d'un type de donn&eacute;e d&eacute;fini par l'utilisateur.<br \>
</div><tt><i>membertype</i></tt><br \>
<div class="fb_indent"><tt><a href="KeyPgMemberSub.html">Sub</a></tt> ou <tt><a href="KeyPgMemberFunction.html">Function</a></tt>.<br \>
</div><tt><i>membername</i> ...</tt><br \>
<div class="fb_indent">Nom du membre &agrave; d&eacute;clarer ou d&eacute;finir avec liste de param&egrave;tres ou valeur de retour.<br \>
<br \>
</div></div><div class="fb_sect_title">Description</div><div class="fb_sect_cont"><br \>
Indique que le <tt><i>membertype</i></tt> imm&eacute;diatement &agrave; la droite du qualificateur <tt><b>Const</b></tt> doit &ecirc;tre consid&eacute;r&eacute; comme &eacute;tant en lecture seule.  Les d&eacute;clarations "En-lecture-seule" (Read-only) (<tt><b>Const</b></tt>) sont une mesure de s&eacute;curit&eacute; qui peut &ecirc;tre comprise comme "promesse d'aucun changement".  Le compilateur utilise les d&eacute;clarations <tt><b>Const</b></tt> pour v&eacute;rifier les op&eacute;rations sur les variables et param&egrave;tres et g&eacute;n&eacute;rer une erreur lors de la compilation si leurs donn&eacute;es pourraient changer.  Il n'y a pas de temps perdu d'ex&eacute;cution en utilisant les qualificateurs <tt><b>Const</b></tt> puisque tous les contr&ocirc;les sont effectu&eacute;s au moment de la compilation.<br \>
<br \>
<tt><b>Const</b></tt>, lorsqu'il est utilis&eacute; pr&eacute;c&eacute;dant <tt><i>membertype</i></tt> au d&eacute;but d'une d&eacute;claration indique que le param&egrave;tre cach&eacute; <tt><a href="KeyPgThis.html">This</a></tt> est consid&eacute;r&eacute; comme en lecture seule.  La d&eacute;claration peut &ecirc;tre lue comme l'invocation de la promesse que <tt><i>membertype</i></tt> ne changera pas de <tt><i>typename</i></tt>, et le compilateur affichera une erreur si le membre de la proc&eacute;dure essaye de changer un champ de donn&eacute;es, ou appelle un membre non-<tt><b>Const</b></tt> de proc&eacute;dure.  Les membres de proc&eacute;dures ne peuvent &ecirc;tre &agrave; la fois <tt><b>Const</b></tt> et <tt><a href="KeyPgStaticMember.html">Static</a></tt> car les membres statiques de proc&eacute;dures n'ont pas de param&egrave;tre <tt><a href="KeyPgThis.html">This</a></tt> cach&eacute;.<br \>
<br \>
</div><div class="fb_sect_title">Exemple</div><div class="fb_sect_cont"><br \>
<tt><div class="freebasic">
<span class="com">''&nbsp;Const&nbsp;Member&nbsp;Procedures</span><br />
<br />
<span class="key">Type</span>&nbsp;<span class="wrd">foo</span><br />
&nbsp;&nbsp;<span class="wrd">x</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span><br />
&nbsp;&nbsp;<span class="wrd">c</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">0</span><br />
&nbsp;&nbsp;<span class="key">Declare</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Sub</span>&nbsp;<span class="wrd">Inspect1</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="key">Declare</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Sub</span>&nbsp;<span class="wrd">Inspect2</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="key">Declare</span>&nbsp;<span class="key">Sub</span>&nbsp;<span class="wrd">Mutate1</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="key">Declare</span>&nbsp;<span class="key">Sub</span>&nbsp;<span class="wrd">Mutate2</span><span class="oth">()</span><br />
<span class="key">End</span>&nbsp;<span class="key">Type</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo.Mutate1</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;we&nbsp;can&nbsp;change&nbsp;non-const&nbsp;data&nbsp;fields</span><br />
&nbsp;&nbsp;<span class="wrd">x</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">1</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;but&nbsp;we&nbsp;still&nbsp;can't&nbsp;change&nbsp;const&nbsp;data</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;fields,&nbsp;they&nbsp;are&nbsp;promised&nbsp;not&nbsp;to&nbsp;change</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;c&nbsp;=&nbsp;1&nbsp;''&nbsp;Compile&nbsp;error</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo.Mutate2</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;we&nbsp;can&nbsp;call&nbsp;const&nbsp;members</span><br />
&nbsp;&nbsp;<span class="wrd">Inspect1</span><span class="oth">()</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;and&nbsp;non-const&nbsp;members</span><br />
&nbsp;&nbsp;<span class="wrd">Mutate1</span><span class="oth">()</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo.Inspect1</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;can&nbsp;use&nbsp;data&nbsp;members</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span><br />
&nbsp;&nbsp;<span class="wrd">y</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="wrd">c</span>&nbsp;<span class="oth">+</span>&nbsp;<span class="wrd">x</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;but&nbsp;not&nbsp;change&nbsp;them&nbsp;because&nbsp;Inspect1()</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;is&nbsp;const&nbsp;and&nbsp;promises&nbsp;not&nbsp;to&nbsp;change&nbsp;foo</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;x&nbsp;=&nbsp;10&nbsp;''&nbsp;Compile&nbsp;error</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo.Inspect2</span><span class="oth">()</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;we&nbsp;can&nbsp;call&nbsp;const&nbsp;members</span><br />
&nbsp;&nbsp;<span class="wrd">Inspect1</span><span class="oth">()</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;but&nbsp;not&nbsp;non-const&nbsp;members</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;Mutate1()&nbsp;''&nbsp;Compile&nbsp;error</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
</div></tt><br />
<br \>
</ul></div><div class="fb_sect_title">Diff&eacute;rences avec QB</div><div class="fb_sect_cont"><br \>
<ul><li> Nouveau pour FreeBASIC<br \>
<br \>
</ul></div><div class="fb_sect_title">Voir aussi</div><div class="fb_sect_cont"><br \>
<ul><li> <tt><a href="KeyPgConst.html">Const</a></tt><br \>
<li> <tt><a href="KeyPgConstQualifier.html">Const (Qualificateur)</a></tt><br \>
<li> <tt><a href="KeyPgDim.html">Dim</a></tt><br \>
<li> <tt><a href="KeyPgType.html">Type</a></tt><br \>
<br \>
</ul></div>
</div>
</div> 
</div> 
</body>
</html>
