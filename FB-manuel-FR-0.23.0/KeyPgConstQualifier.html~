<html>
<head>
<title>Const (Qualifier)</title>
<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
<div id="fb_body_wrapper">
<div id="fb_tab">
<div id="fb_tab_l">Const (Qualificateur)</div>
<div id="fb_tab_r">&nbsp;<img src="images/fblogo_mini.gif" /></div> 
</div> 
<div id="fb_pg_wrapper">
<div id="fb_pg_body">
	Indique que le type de donn&eacute;es ou un pointeur de type de donn&eacute;es est en lecture seule.<br \>
<br \>
<div class="fb_sect_title">Syntaxe</div><div class="fb_sect_cont"><tt><br \>
... <a href="KeyPgAs.html">As</a> [<b>Const</b>] <i><a href="DataType.html">datatype</a></i> [ [<b>Const</b>] <a href="KeyPgPtr.html">Ptr</a> ... ]<br \>
</tt><br \>
</div><div class="fb_sect_title">Param&egrave;tres</div><div class="fb_sect_cont"><br \>
<tt><i>datatype</i></tt><br \>
<div class="fb_indent">Nom d'un type de donn&eacute;es standard ou d'un type de donn&eacute;es d&eacute;fini par l'utilisateur.<br \>
<br \>
</div></div><div class="fb_sect_title">Description</div><div class="fb_sect_cont"><br \>
Indique que le <tt><i>datatype (= type de donn&eacute;es)</i></tt> ou <tt><a href="KeyPgPtr.html">Ptr</a></tt> imm&eacute;diatement &agrave; la droite du qualificateur <tt><b>Const</b></tt> doit &ecirc;tre consid&eacute;r&eacute; comme &eacute;tant en lecture seule.  Les d&eacute;clarations en lecture seule (<tt><b>Const</b></tt>) sont une mesure de s&eacute;curit&eacute; de type qui peut &ecirc;tre comprise comme "<i>promesse de ne pas changer</i>".  Le compilateur utilise les d&eacute;clarations <tt><b>Const</b></tt> pour v&eacute;rifier les op&eacute;rations sur les variables et param&egrave;tres et g&eacute;n&eacute;rer une erreur lors de la compilation si leurs donn&eacute;es pourraient changer.  Il n'y a pas d'annulation d'ex&eacute;cution pour l'utilisation du qualificateur <tt><b>Const</b></tt> puisque tous les contr&ocirc;les sont effectu&eacute;s au moment de la compilation.<br \>
<br \>
<tt><b>Const</b></tt> peut &ecirc;tre utilis&eacute; partout o&ugrave; des d&eacute;clarations de type de donn&eacute;es sont pr&eacute;sentes.  Cela inclut les variables, les param&egrave;tres, les r&eacute;sultats de retour de fonction, des champs de type d&eacute;fini par l'utilisateur, alias de type et <tt><i>casting</i></tt>.  Le <tt><i>datatype (= type de donn&eacute;es)</i></tt> peut &ecirc;tre n'importe quel type int&eacute;gr&eacute; de donn&eacute;es standard ou de type d&eacute;fini par l'utilisateur.<br \>
<br \>
Les variables en lecture seule doivent avoir un initialisateur sinon la modification d'une variable en lecture seule par le biais d'une allocation g&eacute;n&eacute;rera une erreur de compilation.  L'initialisation peut appara&icirc;tre apr&egrave;s la d&eacute;claration de la variable.<br \>
<br \>
Des variables <tt><b>Const</b></tt> et non-<tt><b>Const</b></tt> peuvent &ecirc;tre transmises &agrave; une proc&eacute;dure qui attend un param&egrave;tre <tt><b>Const</b></tt>.  Toutefois, une variable <tt><b>Const</b></tt> ne peut pas &ecirc;tre pass&eacute;e &agrave; une proc&eacute;dure exigeant un param&egrave;tre non-<tt><b>Const</b></tt>, cela g&eacute;n&eacute;rera une erreur de compilation.<br \>
<br \>
Les proc&eacute;dures peuvent &ecirc;tre surcharg&eacute;es sur la base <tt><b>Const</b></tt> des param&egrave;tres.  Par exemple, une proc&eacute;dure peut &ecirc;tre surcharg&eacute;e, une version de la proc&eacute;dure ayant un param&egrave;tre '<tt><i>foo byref as bar</i></tt>' et l'autre version de la proc&eacute;dure ayant un param&egrave;tre '<tt><i>foo bar byref as const</i></tt>'.<br \>
<br \>
Avec une d&eacute;claration de pointeur, <tt><b>Const</b></tt> peut &ecirc;tre utilis&eacute; pour indiquer quelle partie de la d&eacute;claration de pointeur est en lecture seule (toutes les autres parties sont par d&eacute;faut en lecture-&eacute;criture).  L'&eacute;l&eacute;ment en lecture seule du type de pointeur de donn&eacute;es peut &ecirc;tre le pointeur lui-m&ecirc;me (l'adresse), ce que le pointeur pointe (les donn&eacute;es), ou les deux.  Dans une d&eacute;claration avec plus d'un niveau d'indirection de <tt><a href="KeyPgPtr.html">Ptr</a></tt>, le <tt><a href="KeyPgPtr.html">Ptr</a></tt> le plus &agrave; droite indique le niveau le plus &eacute;lev&eacute; d'indirection et est donc d&eacute;r&eacute;f&eacute;renc&eacute; en premier.<br \>
<br \>
Le compilateur a une limite '<tt><i>hard</i></tt>' interne de huit (8) niveaux d'indirection pointeur en ce qui concerne les qualificateurs <tt><b>Const</b></tt> et le comportement de <tt><b>Const</b></tt> avec l'utilisation des types de donn&eacute;es <tt><a href="KeyPgPtr.html">Ptr</a></tt> ayant plus de huit (8) niveaux d'indirection est ind&eacute;fini.<br \>
<br \>
</div><div class="fb_sect_title">Exemple</div><div class="fb_sect_cont"><br \>
<tt><div class="freebasic">
<span class="com">''&nbsp;Const&nbsp;Variables</span><br />
<br />
<span class="com">''&nbsp;procedure&nbsp;taking&nbsp;a&nbsp;const&nbsp;parameter</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">proc1</span><span class="oth">(</span>&nbsp;<span class="key">ByRef</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">)</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;can't&nbsp;change&nbsp;x&nbsp;because&nbsp;it&nbsp;is&nbsp;const</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;x&nbsp;=&nbsp;10&nbsp;''&nbsp;compile&nbsp;error</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;but&nbsp;we&nbsp;can&nbsp;use&nbsp;it&nbsp;in&nbsp;expressions&nbsp;and</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;assign&nbsp;it&nbsp;to&nbsp;other&nbsp;variables</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span><br />
&nbsp;&nbsp;<span class="wrd">y</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="wrd">x</span><br />
&nbsp;&nbsp;<span class="wrd">y</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="oth">*</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="oth">+</span>&nbsp;<span class="wrd">x</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''&nbsp;procedure&nbsp;taking&nbsp;a&nbsp;non-const&nbsp;parameter</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">proc2</span><span class="oth">(</span>&nbsp;<span class="key">ByRef</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">)</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;we&nbsp;can&nbsp;change&nbsp;the&nbsp;value</span><br />
&nbsp;&nbsp;<span class="wrd">x</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">10</span><br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''&nbsp;declare&nbsp;a&nbsp;non-const&nbsp;and&nbsp;const&nbsp;variable</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">a</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">b</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">5</span><br />
<br />
<span class="com">''&nbsp;proc1()&nbsp;will&nbsp;accept&nbsp;a&nbsp;non-const&nbsp;or&nbsp;const</span><br />
<span class="com">''&nbsp;argument&nbsp;because&nbsp;proc1()&nbsp;promises&nbsp;not&nbsp;to</span><br />
<span class="com">''&nbsp;change&nbsp;the&nbsp;variable&nbsp;passed&nbsp;to&nbsp;it.</span><br />
<span class="wrd">proc1</span><span class="oth">(</span>&nbsp;<span class="wrd">a</span>&nbsp;<span class="oth">)</span><br />
<span class="wrd">proc1</span><span class="oth">(</span>&nbsp;<span class="wrd">b</span>&nbsp;<span class="oth">)</span><br />
<br />
<span class="com">''&nbsp;proc2()&nbsp;will&nbsp;accept&nbsp;a&nbsp;non-const&nbsp;argument</span><br />
<span class="wrd">proc2</span><span class="oth">(</span>&nbsp;<span class="wrd">a</span>&nbsp;<span class="oth">)</span><br />
<br />
<span class="com">''&nbsp;but&nbsp;not&nbsp;a&nbsp;const&nbsp;argument&nbsp;because&nbsp;proc2()</span><br />
<span class="com">''&nbsp;might&nbsp;change&nbsp;the&nbsp;variable's&nbsp;data&nbsp;and&nbsp;we</span><br />
<span class="com">''&nbsp;promised&nbsp;that&nbsp;'b'&nbsp;would&nbsp;not&nbsp;change.</span><br />
<span class="com">''&nbsp;proc2(&nbsp;b&nbsp;)&nbsp;''&nbsp;compile&nbsp;error</span><br />
</div></tt><br />
<br \>
<tt><div class="freebasic">
<span class="com">''&nbsp;Const&nbsp;Pointers</span><br />
<br />
<span class="com">''&nbsp;an&nbsp;integer</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">1</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">2</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">z</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">3</span><br />
<br />
<span class="com">''&nbsp;To&nbsp;check&nbsp;that&nbsp;the&nbsp;compiler&nbsp;generates&nbsp;errors</span><br />
<span class="com">''&nbsp;when&nbsp;attempting&nbsp;to&nbsp;reassign&nbsp;const&nbsp;variables,</span><br />
<span class="com">''&nbsp;uncomment&nbsp;the&nbsp;assignments&nbsp;below.</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Scope</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;a&nbsp;pointer&nbsp;to&nbsp;an&nbsp;integer</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">p</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="key">Ptr</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">x</span><br />
<br />
&nbsp;&nbsp;<span class="wrd">p</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">y</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="com">/'&nbsp;OK&nbsp;-&nbsp;pointer&nbsp;can&nbsp;be&nbsp;changed&nbsp;'/</span><br />
&nbsp;&nbsp;<span class="oth">*</span><span class="wrd">p</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="wrd">z</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="com">/'&nbsp;OK&nbsp;-&nbsp;data&nbsp;can&nbsp;be&nbsp;changed&nbsp;'/</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Scope</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Scope</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;a&nbsp;pointer&nbsp;to&nbsp;a&nbsp;constant&nbsp;integer</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">p</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="key">Ptr</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">x</span><br />
<br />
&nbsp;&nbsp;<span class="wrd">p</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">y</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="com">/'&nbsp;OK&nbsp;-&nbsp;pointer&nbsp;can&nbsp;be&nbsp;changed&nbsp;'/</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;*p&nbsp;=&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;/'&nbsp;Error&nbsp;-&nbsp;data&nbsp;is&nbsp;const&nbsp;'/</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Scope</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Scope</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;a&nbsp;constant&nbsp;pointer&nbsp;to&nbsp;an&nbsp;integer</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">p</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Ptr</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">x</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;p&nbsp;=&nbsp;@y&nbsp;&nbsp;&nbsp;&nbsp;/'&nbsp;Error&nbsp;-&nbsp;pointer&nbsp;is&nbsp;const&nbsp;'/</span><br />
&nbsp;&nbsp;<span class="oth">*</span><span class="wrd">p</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="wrd">z</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="com">/'&nbsp;OK&nbsp;-&nbsp;data&nbsp;can&nbsp;be&nbsp;changed&nbsp;'/</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Scope</span><br />
<br />
<span class="com">''</span><br />
<span class="key">Scope</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;a&nbsp;constant&nbsp;pointer&nbsp;to&nbsp;a&nbsp;constant&nbsp;integer</span><br />
&nbsp;&nbsp;<span class="key">Dim</span>&nbsp;<span class="wrd">p</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Ptr</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="oth">@</span><span class="wrd">x</span><br />
<br />
&nbsp;&nbsp;<span class="com">''&nbsp;p&nbsp;=&nbsp;@y&nbsp;&nbsp;&nbsp;&nbsp;/'&nbsp;Error&nbsp;-&nbsp;pointer&nbsp;is&nbsp;const&nbsp;'/</span><br />
&nbsp;&nbsp;<span class="com">''&nbsp;*p&nbsp;=&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;/'&nbsp;Error&nbsp;-&nbsp;data&nbsp;is&nbsp;const&nbsp;'/</span><br />
<br />
<span class="key">End</span>&nbsp;<span class="key">Scope</span><br />
</div></tt><br />
<br \>
<tt><div class="freebasic">
<span class="com">''&nbsp;Const&nbsp;Parameters&nbsp;in&nbsp;an&nbsp;Overloaded&nbsp;Procedure</span><br />
<br />
<span class="com">''&nbsp;procedure&nbsp;with&nbsp;non-const&nbsp;parameter</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo</span>&nbsp;<span class="key">Overload</span><span class="oth">(</span>&nbsp;<span class="key">ByRef</span>&nbsp;<span class="wrd">n</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">)</span><br />
&nbsp;&nbsp;<span class="key">Print</span>&nbsp;<span class="quo">"called&nbsp;'foo(&nbsp;byref&nbsp;n&nbsp;as&nbsp;integer&nbsp;)'"</span><br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="com">''&nbsp;procedure&nbsp;with&nbsp;const&nbsp;parameter</span><br />
<span class="key">Sub</span>&nbsp;<span class="wrd">foo</span>&nbsp;<span class="key">Overload</span><span class="oth">(</span>&nbsp;<span class="key">ByRef</span>&nbsp;<span class="wrd">n</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">)</span><br />
&nbsp;&nbsp;<span class="key">Print</span>&nbsp;<span class="quo">"called&nbsp;'foo(&nbsp;byref&nbsp;n&nbsp;as&nbsp;const&nbsp;integer&nbsp;)'"</span><br />
<span class="key">End</span>&nbsp;<span class="key">Sub</span><br />
<br />
<span class="key">Dim</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">1</span><br />
<span class="key">Dim</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="key">As</span>&nbsp;<span class="key">Const</span>&nbsp;<span class="key">Integer</span>&nbsp;<span class="oth">=</span>&nbsp;<span class="num">2</span><br />
<br />
<span class="wrd">foo</span><span class="oth">(</span>&nbsp;<span class="wrd">x</span>&nbsp;<span class="oth">)</span><br />
<span class="wrd">foo</span><span class="oth">(</span>&nbsp;<span class="wrd">y</span>&nbsp;<span class="oth">)</span><br />
<br />
<span class="com">''&nbsp;OUTPUT:</span><br />
<span class="com">''&nbsp;called&nbsp;'foo(&nbsp;byref&nbsp;n&nbsp;as&nbsp;integer&nbsp;)'</span><br />
<span class="com">''&nbsp;called&nbsp;'foo(&nbsp;byref&nbsp;n&nbsp;as&nbsp;const&nbsp;integer&nbsp;)'</span><br />
</div></tt><br />
</div><div class="fb_sect_title">Diff&eacute;rences avec QB</div><div class="fb_sect_cont"><br \>
<ul><li> Nouveau pour FreeBASIC<br \>
<br \>
</ul></div><div class="fb_sect_title">Voir aussi</div><div class="fb_sect_cont"><br \>
<ul><li> <tt><a href="KeyPgConst.html">Const</a></tt><br \>
<li> <tt><a href="KeyPgConstMember.html">Const (Member)</a></tt><br \>
<li> <tt><a href="KeyPgDim.html">Dim</a></tt><br \>
<li> <tt><a href="KeyPgType.html">Type</a></tt><br \>
<br \>
</ul></div>
</div>
</div> 
</div> 
</body>
</html>
